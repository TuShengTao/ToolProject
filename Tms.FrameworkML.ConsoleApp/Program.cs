// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.IO;
using System.Linq;
using System.Threading;
using Microsoft.ML;
using Tms_FrameworkML.Model;
using Tms.Code;

namespace Tms_FrameworkML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"C:\Users\tushengtao\AppData\Local\Temp\f878d682-ab9b-4dad-a137-750b3d9a4128.tsv";

        static void Main(string[] args)
        {

            //发送邮件
            MailHelper mailHelper = new MailHelper();
            mailHelper.MailUserName = "1450190944@qq.com";//替换自己的qq邮箱： 需要去qq邮箱设置里开启smpt服务,验证后替换下方授权码
            mailHelper.MailName = "工夹具系统-屠圣涛";
            mailHelper.MailPassword = "xvocfkdafxtvfhbe";//可替换自己qq邮箱的授权码
            mailHelper.MailServer = "smtp.qq.com";
            mailHelper.Send("1450190944@qq.com","我的测试","工夹具测试的邮件","UTF-8", false,false);
            // 定时任务 
            Timer timerClock;
            timerClock = new Timer(new TimerCallback(timerCall), null, 0, 3000);
            /*
            //Timer构造函数参数说明：
            Callback：一个 TimerCallback 委托，表示要执行的方法。
            State：一个包含回调方法要使用的信息的对象，或者为空引用（Visual Basic 中为 Nothing）。
            dueTime：调用 callback 之前延迟的时间量（以毫秒为单位）。指定 Timeout.Infinite 以防止计时器开始计时。指定零 (0) 以立即启动计时器。
            Period：调用 callback 的时间间隔（以毫秒为单位）。指定 Timeout.Infinite 可以禁用定期终止。
            */
             Console.ReadKey();
        }
        private static void timerCall(object obj)
        {
            // 预警模块
            //ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);
            ModelInput sampleData = new ModelInput();
            sampleData.RepairCounts = 3;// 维修次数
            sampleData.UseTime = 5677; // 使用时间 
            var predictionResult = ConsumeModel.Predict(sampleData);
            Console.WriteLine($"\n{predictionResult.Prediction}\n\n");
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: '\t',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }
        #endregion
    }
}
